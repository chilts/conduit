h1. New Release

h2. Tagging the Repo

Find all the changes since the last release. For example, if the last release
was 'v0.1.1' and you're on master (ie. v0.1.1..master (master is optional)):

    git tag -l
    # now change this file (PACKAGING) to reflect the new version numbers

    git commit -m 'Prepare for new release of Conduit' PACKAGING
    git push origin master

    export PREV_REL=0.06
    export RELEASE=0.07

    git log v${PREV_REL}..master | grep '^    ' | sort -r | sed 's/^   /  */' | xclip
    # copy the clipboard into an editor somewhere
    git diff v${PREV_REL}..master

Change the top version number and remove the 'ubuntu' part. Make sure it is in
'unstable' rather than 'lucid':

    DEBEMAIL=chilts@appsattic.com dch -v $RELEASE -D lucid

    git commit -m "Update changelog for release v$RELEASE" debian/changelog
    git show

    git push origin master

Test build it and release it (see below).

Then tag the release;

    git tag -m 'CGI::Conduit v$RELEASE' v$RELEASE
    git tag -l
    git push origin v$RELEASE

h2. Making the Packages and Pushing them to the Debian Repository

Test build:

    dpkg-buildpackage -us -uc -tc -t -b

Add it to the repo:

    cd ../packages
    git fetch
    git rebase origin/master
    ./add-packages.sh ubuntu ../libcgi-conduit-perl_${RELEASE}_all.deb
    find . -name "libcgi-conduit-perl_${RELEASE}_all.deb" | xargs git add
    git status

Review the updates and rsync to the repo:

    git commit -a -m "New release (v$RELEASE) of CGI::Conduit" # also deletes the ones missing
    git push origin master
    make rsync
    cd -

(Ends)
